import { GoogleGenAI } from "@google/genai";

// Assume process.env.API_KEY is configured in the environment.
const API_KEY = process.env.API_KEY;

if (!API_KEY) {
    throw new Error("API_KEY is not defined in environment variables.");
}

const ai = new GoogleGenAI({ apiKey: API_KEY });

const PROMPT_ENHANCEMENT_SYSTEM_INSTRUCTION = `You are an expert prompt engineer for an advanced AI image generation model. A user will provide a basic idea, an artistic style, and a specific aspect ratio. Your primary and most critical task is to construct a detailed prompt that FORCES the generated image to strictly adhere to the requested aspect ratio. Start the prompt by explicitly stating the composition, for example: 'A cinematic, ultra-widescreen (16:9) shot of...', or 'A full-body vertical portrait (9:16) of...', or 'A perfectly square (1:1) centered image of...'. Then, elaborate on the user's idea, adding rich details about the subject, environment, lighting, and mood that are appropriate for that composition and style. Do not suggest any details that would contradict the requested aspect ratio. Your output must be ONLY the final, detailed prompt text.`;

const AUDIO_PROMPT_ENHANCEMENT_SYSTEM_INSTRUCTION = `You are a speech writer for a text-to-speech engine. A user will provide a piece of text and a desired tone. Your task is to rewrite the text to sound natural and engaging when read aloud in that specific tone. Adjust sentence structure, word choice, and add appropriate pauses or emphasis where needed, but do not change the core meaning of the text. If the tone is 'Default', make only minor corrections for flow. Your output must be ONLY the rewritten text, ready for synthesis.`;

export const rephraseTextForSpeech = async (text: string, tone: string): Promise<string> => {
    if (tone === 'Default') {
        return text;
    }
    try {
        const response = await ai.models.generateContent({
            model: 'gemini-2.5-flash',
            contents: `User text: "${text}", Desired Tone: "${tone}"`,
            config: {
                systemInstruction: AUDIO_PROMPT_ENHANCEMENT_SYSTEM_INSTRUCTION,
                temperature: 0.7,
            },
        });
        return response.text.trim();
    } catch (error) {
        console.error("Error rephrasing text with Gemini API:", error);
        // Fallback to the original text if enhancement fails
        return text;
    }
};

export const enhancePrompt = async (prompt: string, style: string, aspectRatio: string): Promise<string> => {
  try {
    const response = await ai.models.generateContent({
      model: 'gemini-2.5-flash',
      contents: `User prompt: "${prompt}", Style: "${style}", Aspect Ratio: "${aspectRatio}"`,
      config: {
        systemInstruction: PROMPT_ENHANCEMENT_SYSTEM_INSTRUCTION,
        temperature: 0.8,
      },
    });
    return response.text.trim();
  } catch (error) {
    console.error("Error enhancing prompt with Gemini API:", error);
    // Fallback to a simpler prompt if enhancement fails
    return `${prompt}, ${style}, ${aspectRatio}`;
  }
}

export const generateImagesFromPrompt = async (prompt: string, aspectRatio: string): Promise<string[]> => {
  try {
    const response = await ai.models.generateImages({
        model: 'imagen-4.0-generate-001',
        prompt: prompt,
        config: {
          numberOfImages: 4,
          outputMimeType: 'image/jpeg',
          aspectRatio: aspectRatio,
        },
    });

    if (response.generatedImages && response.generatedImages.length > 0) {
      return response.generatedImages.map(img => img.image.imageBytes);
    } else {
      throw new Error("No images were generated by the API.");
    }
  } catch (error) {
    console.error("Error generating image with Gemini API:", error);
    if (error instanceof Error) {
        throw new Error(`Gemini API Error: ${error.message}`);
    }
    throw new Error("An unexpected error occurred while communicating with the Gemini API.");
  }
};

export const generateVideoFromPrompt = async (prompt: string, onProgress: (message: string) => void): Promise<string> => {
    try {
        onProgress("Starting video generation job...");
        let operation = await ai.models.generateVideos({
            model: 'veo-2.0-generate-001',
            prompt: prompt,
            config: {
                numberOfVideos: 1,
            }
        });

        const progressMessages = [
            "Warming up the digital director...",
            "Rendering the first few frames...",
            "Compositing the scene...",
            "Applying special effects...",
            "Adding cinematic lighting...",
            "Finalizing the audio mix (just kidding!)...",
            "This is taking a bit longer than usual, but good things are coming...",
            "Polishing the final cut...",
        ];
        let messageIndex = 0;

        while (!operation.done) {
            onProgress(progressMessages[messageIndex % progressMessages.length]);
            messageIndex++;
            await new Promise(resolve => setTimeout(resolve, 15000)); // Poll every 15 seconds
            operation = await ai.operations.getVideosOperation({ operation: operation });
        }

        onProgress("Video is ready! Downloading...");
        const downloadLink = operation.response?.generatedVideos?.[0]?.video?.uri;

        if (!downloadLink) {
            throw new Error("Video generation completed, but no download link was provided.");
        }

        // The response.body contains the MP4 bytes. You must append an API key when fetching from the download link.
        const response = await fetch(`${downloadLink}&key=${API_KEY}`);
        if (!response.ok) {
            throw new Error(`Failed to download video file. Status: ${response.status}`);
        }
        const videoBlob = await response.blob();
        return URL.createObjectURL(videoBlob);

    } catch (error) {
        console.error("Error generating video with Gemini API:", error);
        if (error instanceof Error) {
            throw new Error(`Gemini API Error: ${error.message}`);
        }
        throw new Error("An unexpected error occurred while communicating with the Gemini API.");
    }
};